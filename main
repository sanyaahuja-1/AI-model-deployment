from fastapi import FastAPI, UploadFile, File
import io
from PIL import Image
import ssl
import uvicorn

# Attempt to import torch, handle missing dependency
try:
    import torch
    import torchvision.transforms as transforms
    TORCH_AVAILABLE = True
except ModuleNotFoundError:
    print("Warning: 'torch' module not found. Ensure PyTorch is installed.")
    TORCH_AVAILABLE = False

# Fix SSL issue for downloading models
ssl._create_default_https_context = ssl._create_unverified_context

app = FastAPI()

# Load a pre-trained PyTorch model if available
if TORCH_AVAILABLE:
    try:
        model = torch.hub.load('pytorch/vision:v0.10.0', 'resnet18', pretrained=True)
        model.eval()
    except Exception as e:
        model = None
        print(f"Error loading model: {e}")

    # Define transformation
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])
else:
    model = None

@app.post("/predict")
async def predict(file: UploadFile = File(...)):
    if model is None:
        return {"error": "Model not loaded or PyTorch is missing"}
    
    image = Image.open(io.BytesIO(await file.read()))
    image = transform(image).unsqueeze(0)
    
    with torch.no_grad():
        output = model(image)
    
    prediction = torch.argmax(output, 1).item()
    return {"prediction": prediction}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
